plugins {
	id "java"
	id "com.palantir.graal" version "0.3.0-2-g6c49b4d"
}
repositories {
	mavenLocal()
	mavenCentral()
}

graal {
	mainClass "com.mageddo.micronaut.Application"
	graalVersion("1.0.0-rc13")
	outputName(project.name)
	option("-H:IncludeResources=static/.*")
	option("-H:IncludeResources=logback.xml|application.yml|META-INF/services/*.*")
	option("-H:IncludeResources=application.properties")
	option("--allow-incomplete-classpath")
//	option("-H:ReflectionConfigurationFiles=build/reflect.json")
	option("--rerun-class-initialization-at-runtime=sun.security.jca.JCAUtil\$CachedSecureRandomHolder,javax.net.ssl.SSLContext")
	option("--delay-class-initialization-to-runtime=io.netty.handler.codec.http.HttpObjectEncoder,io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder,io.netty.handler.ssl.util.ThreadLocalInsecureRandom,com.sun.jndi.dns.DnsClient")
	option("-H:+ReportUnsupportedElementsAtRuntime")
	option("-H:-UseServiceLoaderFeature")
	option("-H:EnableURLProtocols=http")
//	option("--enable-url-protocols=http")
	option("-Dfile.encoding=UTF-8")
	option("--no-server")
}
dependencies {
	compile ("io.micronaut.configuration:jdbc-hikari:1.0.0.RC2")
	compile ("org.postgresql:postgresql:42.2.5")
//	compile ("org.springframework:org.springframework.jdbc:3.2.2.RELEASE")

	compile ("org.springframework:spring-jdbc:5.1.5.RELEASE")
	compile ("io.micronaut:micronaut-spring:${micronautVersion}")

//	compile "io.micronaut:micronaut-http-client:"
	compile "io.micronaut:micronaut-http-server-netty:${micronautVersion}"
	compile "io.micronaut:micronaut-inject:${micronautVersion}"
	compile "io.micronaut:micronaut-runtime:${micronautVersion}"
	testCompile "junit:junit:4.12"

	annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
	compileOnly "io.micronaut:micronaut-inject-java:${micronautVersion}"
	testCompile "io.micronaut:micronaut-inject-java:${micronautVersion}"

	compile('com.mageddo:rsl:1.0.0')
	annotationProcessor('com.mageddo:rsl-compiler:1.0.1')
	testAnnotationProcessor('com.mageddo:rsl-compiler:1.0.1')

	runtime "ch.qos.logback:logback-classic:1.2.3"

}

task fatJar(type: Jar) {
	baseName = project.name + '-all'
	manifest {
		attributes (
			'Class-Path': configurations.compile.collect { "lib/${it.name}" }.join(' ')
		)
	}
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

