import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
	repositories {
		mavenLocal()
	}
}
plugins {
	id "java"
	id "application"
	id "com.palantir.graal" version "0.3.0-2-g6c49b4d"
	id "com.mageddo.graal-reflection-configuration-generator" version "2.0.1"
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def className = "com.mageddo.graalvm.okhttp.Application"

mainClassName = className

task debug(type: JavaExec){
	debug = true
	classpath = sourceSets.main.runtimeClasspath
	main = className
}

graal {
	mainClass className
	graalVersion(graalVMVersion)
	outputName(project.name)
	downloadBaseUrl("https://github.com/oracle/graal/releases/download/vm-19.0.2/graalvm-ce-linux-amd64-19.0.2.tar.gz#")
	option("-H:IncludeResources=.*.xml|.*.properties")
	option("--allow-incomplete-classpath")
	option("-H:+AddAllCharsets")
	option("-H:ReflectionConfigurationFiles=build/reflect.json")
	option("-H:+AllowVMInspection")
	option("-H:+ReportExceptionStackTraces")
	option("-H:+ReportUnsupportedElementsAtRuntime")
	option("-H:EnableURLProtocols=http,https")
	option("--enable-all-security-services")
	option("--enable-http")
	option("--enable-https")
	option("--initialize-at-build-time=org.graalvm.config.NopLogHandler")
	option("-Dfile.encoding=UTF-8")
	option("--no-server")
	option("-J-Xmx5G")
}

dependencies {

	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.2'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'

//	tag::graal[]
	compile ("com.mageddo:graal-reflection-configuration:2.0.0")
	compileOnly("com.oracle.substratevm:svm:${graalVMVersion}")
	compile("org.graalvm.sdk:graal-sdk:${graalVMVersion}")
	//end::graal[]

}

task copyStatics() {
	doLast {

		def binFilePath = Paths.get("${project.buildDir}/graal/")
		def distPath = Paths.get("${binFilePath}/dist")

		deleteRecursively(distPath)

		/**
		 * Copying required libs
		 */

		"${System.getProperty("sun.boot.library.path")}:${System.getProperty("java.library.path")}".split(":").each{
			def libSourcePath = Paths.get(it, "libsunec.so")
			if(Files.exists(libSourcePath)){
				Files.copy(libSourcePath, binFilePath.resolve(libSourcePath.fileName), StandardCopyOption.REPLACE_EXISTING)
			}
		}

		/**
		 * Create a distribution file
		 */
		ant.zip(destfile: "${distPath}/${project.name}.zip"){
			zipfileset("dir": "${binFilePath}")
		}
	}
}

static void deleteRecursively(java.nio.file.Path distPath) {
	Files.createDirectories(distPath)
	Files.walk(distPath)
		.sorted(Comparator.reverseOrder())
		.forEach({
			try {
				Files.deleteIfExists(it)
			} catch (IOException e) {
				throw new UncheckedIOException(e)
			}
		})
}


nativeImage.dependsOn(tasks.reflectConfigFiles)
nativeImage.finalizedBy(tasks.copyStatics)
